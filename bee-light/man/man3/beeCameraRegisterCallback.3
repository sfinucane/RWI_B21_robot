.TH BEECAMERAREGISTERCALLBACK 3 "April 27, 1999" "BeeSoft Light" "BeeSoft Light"

.SH NAME
beeCameraRegisterCallback \- register a callback function to collect camera images

.SH SYNOPSIS
.B #include <bee.h>

.BI "bool beeCameraRegisterCallback(void (*" callbackHandler ")(cameraImageType *) = NULL) ;"

.SH DESCRIPTION
.B "beeCameraRegisterCallback()"
registers a callback function to collect camera images from a BeeSoft Light camera server.
.I "callbackHandler" 
argument specifies a reference to the callback function. After that,
the program can run 
.B "beeCameraSubscribe()"
to activate the update operations. 

The callback handler should have the signature:

.BI "void handler_name(cameraImageType * " image ");"

cameraImageType is defined as

typedef struct {

  int             xsize, ysize; /* image size */
  
  unsigned char   *red;       /* image data   */
  
  unsigned char   *green;     /* image data   */
 
  unsigned char   *blue;      /* image data   */
  
  int             numGrabber; /* zero for first graber*/

} cameraImageType;

You can invoke 
. B "beeSonarRegisterCallback()" 
without any argument to unregister your own callback handler.

.SH "RETURN VALUE"
On success, the function will return TRUE.  On error, FALSE is 
returned.

.SH NOTES
The function hides the details of the message pass among 
BeeSoft Light servers. However, you should at least run 
.BI "tcxServer",
.B "colliServer" 
and
.B "cameraServer"
first. Your shell should set environment variable 
.B "TCXHOST" 
to the host name which runs 
.BR "tcxServer". 
You should also invoke function 
.B "beeInitialize()" 
and
.B "beeCameraConnect"
first in your program. Otherwise, the function will return FALSE.

.SH SEE ALSO
.BR "beeInitialize" (3),
.BR "beeCameraConnect" (3),
.BR "beeCameraSubscribe" (3)


